openapi: 3.0.0
info:
  title: SplitBuddy API
  version: 1.0.0
  description: API for managing shared expenses
servers:
  - url: http://localhost:3001/api/v1
    description: Development server
paths:
/health:
  get:
    summary: Health check endpoint
    tags: [Health]
    responses:
      200:
        description: Service is up and running
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: "OK"
  /auth/login:
    post:
      summary: User login endpoint
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required: [email, password]
      responses:
        200:
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication
        401:
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid username or password"
  /auth/register:
    post:
      summary: Register a new user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: User created
  /users:
    get:
      summary: Get all users
      tags: [Users]
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      summary: Create a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /users/{id}:
    get:
      summary: Get a user by ID
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: User not found
    put:
      summary: Update a user by ID
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        200:
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: User not found
    delete:
      summary: Delete a user by ID
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: User deleted
        404:
          description: User not found
components:
  schemas:
    User:
      type: object
      properties:
        name:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        role:
          type: string
          enum: [USER, ADMIN]
          default: USER
        imageURL:
          type: string
          format: string
      required: [username, email, password, name]
